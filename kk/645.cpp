#include<bits/stdc++.h>
#define ll long long
using namespace std;
ll n,m,s,d,r,ttt=1,t,czcnt=0,czzcnt=0,dpx[25],en[25][25],ycz[25][25],ydp[25][25];/*czcnt虫子有多少，czzcnt虫子出生了多少,ttt计时器，
nm为宇宙之心坐标，d为大炮伤害，r为射程 
*/ 
ll dx[4]={1,0,-1,0};
ll dy[4]={0,-1,0,1};
double xlczb[200000/6];
struct cz{ll tm,dj,hp,x,y; bool yzzx;};

multiset<cz> czsq;//储存存活虫子
multiset<cz>::iterator it;
void dp{ll x,y;}
void czsq_insert(ll tm1,ll dj1,ll hp1){
	cz tmp;
	tmp.dj=dj1;
	tmp.tm=tm1;
	tmp.hp=hp1;
	tmp.x=0;
	tmp.y=0;
	czsq.insert(tmp);
	czzcnt++;
	ycz[0][0]=1;
}

void czborn(){
	if(czcnt<6){
	    czsq_insert(1,czzcnt/6+1,floor(xlczb[czzcnt/6+1]));
	}
}

void energy_placed(){
	//虫子按出生顺序留下能量
	for(it=czsq.begin();it!=czsq.end();it++){//以出生顺序留下能量 
		cz tmp=*it;
		en[tmp.x][tmp.y]+=(tmp.yzzx?5:2);
    }
}

void www(){
	for(it=czsq.begin();it!=czsq.end();it++){
		cz tmp=*it; ll mx=-1; ll fnx,fny;
		for(int k=0;k<4;k++){
			ll nx=tmp.x+dx[k],ny=tmp.y+dy[k];
			if(nx<=n&&ny<=m&&!ycz[nx][ny]&&!ydp[nx][ny]&&en[nx][ny]>mx){
				mx=en[nx][ny];
				fnx=nx;
				fny=ny;
			}
	    }
	    if(mx!=-1){
	    	tmp.x=nx;
	    	tmp.y=ny;
	    	
		}
    }
}

void dpdpdph(){
	
}
int main(){
	cin>>n>>m;
	cin>>s>>d>>r;
	ll tle=200000/6;
	for(ll i=0;i<s;i++){
		cin>>dp[i].x>>dp[i].y;
		ydp[dp[i].x][dp[i].y]=1;
	}
	cin>>t;
	xlczb[1]=4*1.1;
	for(ll i=2;i<t/6+4;i++){
		xlczb[i]=xlczb[i-1]*1.1;
	}
	while(ttt<=t){
		czborn();
		
	}
	return 0;
}

/* question detail:
关于虫子：
1.每一秒开始时所有虫子平面中的某个整点坐标上。如持有宇宙之心，虫子会在该点留下5点能量，否则会留下2单位的能量。然后虫子会选择东南西北中一个方向移动1格
2、选择方向的规则：目标位置不能有其他虫子或大炮；不能往回走到上一秒的位置（除非上一秒没有移动）；不会爬走出地图的边界。如有多个选择，选择能量值最大的目标，如仍有多种选择，则按东南西北的优先级选择
3、虫子活动时间秒数为5的倍数时（以出生为第1秒），如上选定方向后，会额外逆时针转90°，若转后的方向不可行，继续逆时针转90°，直到转到一个可行的方向（如果没有这条，由于能量的指引，每只虫子都会简单地跟着前一只运动，就没意思了）
4、如四个方向都不可行，这一秒会停留在当前点。下一秒重新判断方向
5、可以认为选定方向后，会瞬间移动到它的目标点。每一秒按出生的顺序依次移动，所以先走的可能卡在后走的

关于地图：
1、每一秒地图所有点上的能量值会衰减1单位（除非能量值为0）
2、地图左上角（出生点）坐标为（0，0），右下角（宇宙之心）坐标为（n，m）
3、开始时，地图上没有虫子，每个点能力均为0

关于大炮：
1、大炮放置在地图上的整点处，位置不会变化
2、大炮射速是1秒/次，攻击伤害为d/次，攻击距离为r（包含）。每秒虫子移动完后大炮才开始攻击
3、大炮首先选择射程内持有宇宙之心的虫子，如没有，则选择距离最近的虫子，如距离也一样，则选出生较早的
4、大炮攻击是同时进行的，也就是各自独立选择目标，例如一只虫子被两门大炮选为目标，即使一炮就能打死，两门炮还是会打这同一只。所有炮攻击完后，死掉的虫子才会从地图消失

关于出生点：
1、 地图上至多有6只虫子，如果不满且出生点没有虫子，则每秒会从出生点爬出一只新虫子。刚出生的虫子位置为（0,0）
2、 级别为k的虫子初始血量为int(4*1.1^k)  （int表示取下整）。被大炮攻击一次血减少d，如血量为负，就算挂了（只要血量非负，包括为0，都不影响虫子的任何动作）
3、 前6只出生的虫子为1级，第7~12只是2级，以此类推

关于宇宙之心
1、如有虫子走到（n,m），并且宇宙之心无人持有，则这只虫子就会自动持有宇宙之心。同时其血量会回复一半，也就是int(初始血量/2），但血量上限仍为初始血量
2、持有宇宙之心的虫子如果死亡，宇宙之心会瞬间回到（n,m）
3、持有宇宙之心的虫子走到出生点，则歌者被判失败

每一秒内以上时间的触发顺序：
虫子出生->虫子按出生顺序留下能量+选择方向+行走（新拿到宇宙之心的回血）->大炮攻击->挂掉的虫子消失（如持有宇宙之心，则宇宙之心归位）->判断歌者是否失败->地图上的能量衰减
*/
